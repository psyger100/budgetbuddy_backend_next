// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  userName     String               @unique
  email        String               @unique
  password     String
  refreshToken String?
  avatar_url   String?
  Transaction  Transaction[]        @relation("transactionOwner")
  UserOnGroups UserOnGroups[]       @relation("member")
  Friend1      Friend[]             @relation("FriendRequestSender")
  Friend2      Friend[]             @relation("FriendRequestReceiver")
  Tsender      TransactionEntries[] @relation("transactionPayer")
  Treceiver    TransactionEntries[] @relation("transactionReceiver")
}

model Friend {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId     String  @db.ObjectId
  user       User    @relation("FriendRequestSender", fields: [userId], references: [id])
  friendId   String  @db.ObjectId
  friend     User    @relation("FriendRequestReceiver", fields: [friendId], references: [id])
  isAccepted Boolean
}

model Group {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  lastReset    DateTime?      @default(now())
  UserOnGroups UserOnGroups[] @relation("groupMember")
  Category     Category[]     @relation("groupCategory")
  Transaction  Transaction[]  @relation("groupTransaction")

  TransactionEntries TransactionEntries[] @relation("groupSplitedTransaction")
}

model UserOnGroups {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  groupId    String @db.ObjectId
  group      Group  @relation("groupMember", fields: [groupId], references: [id])
  userId     String @db.ObjectId
  user       User   @relation("member", fields: [userId], references: [id])
  maxAmount  Int
  restAmount Int
}

model Category {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  maxAmount   Int
  restAmount  Int
  Transaction Transaction[] @relation("categoryRef")
  groupId     String        @db.ObjectId
  group       Group         @relation("groupCategory", fields: [groupId], references: [id])
}

model Transaction {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  description        String
  amount             Int
  date               DateTime             @default(now())
  transactionOwner   String               @db.ObjectId
  user               User                 @relation("transactionOwner", fields: [transactionOwner], references: [id])
  category           Category             @relation("categoryRef", fields: [categoryId], references: [id])
  categoryId         String               @db.ObjectId
  groupId            String               @db.ObjectId
  splitted           Boolean              @default(false)
  group              Group                @relation("groupTransaction", fields: [groupId], references: [id])
  TransactionEntries TransactionEntries[] @relation("transactionId")
}

model TransactionEntries {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  transactionId String      @db.ObjectId
  Transaction   Transaction @relation("transactionId", fields: [transactionId], references: [id])
  Payer         String      @db.ObjectId
  user1         User        @relation("transactionPayer", fields: [Payer], references: [id])
  Receiver      String      @db.ObjectId
  user2         User        @relation("transactionReceiver", fields: [Receiver], references: [id])
  groupId       String      @db.ObjectId
  group         Group       @relation("groupSplitedTransaction", fields: [groupId], references: [id])
  amount        Int
}
